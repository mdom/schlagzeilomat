#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/../extlib/lib/perl5/";
use Mojo::Base -base;
use Mojo::Feed;
use Mojo::SQLite;
use Mojo::WebService::Twitter;
use Mojo::File 'path';
use Mojo::JSON 'decode_json';
use Encode;
use Fcntl qw(:flock);
use Getopt::Long;
use Pod::Usage;

my $options = { import => 1, publish => 1, dry_run => 0 };
GetOptions( $options, 'import!', 'publish!', 'verbose|v', 'help' )
  or pod2usage(1);

pod2usage(1) if $options->{help};

my $config_file = path('schlagzeilomat.json');

if ( !-e $config_file ) {
    die "$0: Missing configuration file $config_file.\n";
}

open my $lock_file, '<', $config_file or die $!;
flock $lock_file, LOCK_EX | LOCK_NB
  or die "Unable to lock file $config_file: $!\n";

my $config = decode_json $config_file->slurp;

if ( !exists $config->{db_file} ) {
    die "$0: Missing configuration parameter db_file.\n";
}

$config->{max_items} ||= 1;

my $sql = Mojo::SQLite->new->from_filename( $config->{db_file} );
$sql->migrations->from_string(<<EOF)->migrate;
  -- 1 up
	create table items (
		id integer primary key,
		guid text unique,
		published integer default 0,
		title text not null,
		link text not null
	);
  -- 1 down
	drop table items;
EOF

if ( $options->{import} ) {
    for my $url ( @{ $config->{feeds} } ) {
        my $feed = Mojo::Feed->new( url => $url );

        for my $item ( $feed->items->reverse->each ) {
            $sql->db->query(
                q{ insert or ignore into items 
						(guid, title, link) values (?,?,?) },
                $item->id, $item->title, $item->link
            );
        }
    }
}

if ( $options->{publish} ) {

    my $twitter = Mojo::WebService::Twitter->new(
        api_key    => $config->{api_key},
        api_secret => $config->{api_secret_key},
    );

    $twitter->authentication(
        oauth => $config->{access_token},
        $config->{access_token_secret},
    );

    my @items = $sql->db->query(
        'select * from items where published = 0 order by id limit ? ',
        $config->{max_items} )->hashes->each;

    for my $item (@items) {
        my $msg = $item->{title} . " " . $item->{link};
        eval { $twitter->post_tweet($msg) };
        if ($@) {
            warn $@->to_string;
            next;
        }
        $sql->db->update(
            items => { published => 1 },
            { id => $item->{id} }
        );
        if ( $options->{verbose} ) {
            warn encode( 'UTF-8', qq{Publish "$msg"\n} );
        }
    }
}

exit 0;

__END__

=head1 NAME

schlagzeilomat - Publish rss feeds to twitter

=head1 SYNOPSIS

schlagzeilomat [options]

=head1 OPTIONS

=over

=item --[no-]publish

Publish unpublished items to twitter. [default: true]

=item --[no-]import

Import RSS feeds. [default: true]

=item --verbose

Print more information.

=item --help

Show this help.

=back

=head1 DESCRIPTION

B<schlagzeilomat> will import RSS feeds and publish it twitter. Only the
title and link will be sent. See L<https://twitter.com/taz_news> for an
example.

=head1 COPYRIGHT AND LICENSE 

Copyright 2020 Mario Domgoergen C<< <mario@domgoergen.com> >> 

This program is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation, either version 3 of the License, or 
(at your option) any later version. 

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
GNU General Public License for more details. 

You should have received a copy of the GNU General Public License 
along with this program.  If not, see <http://www.gnu.org/licenses/>. 

=cut
